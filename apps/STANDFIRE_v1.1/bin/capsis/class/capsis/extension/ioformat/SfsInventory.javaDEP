/*
 * Capsis 4 - Computer-Aided Projections of Strategies in Silviculture
 *
 * Copyright (C) 2000-2003  Francois de Coligny
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package capsis.extension.ioformat;

// This extension is for sapin model.
// It may become usable by other models: implement other constructors
// ex: public SfsInventory (MobyDickStand stand) throws Exception {
// with: import mobydick.model.*;
import stretch.model.*;

import capsis.extension.*;
import capsis.kernel.*;
import capsis.util.*;
import java.io.*;
import java.util.*;

/**
 * SfsInventory contains records description for sapin input/output
 * inventory file.
 *
 * @author F. de Coligny - january 2001
 */
public class SfsInventory extends StandRecordSet {

	static {
		Translator.addBundle("capsis.extension.ioformat.SfsInventory");
	}

	// Generic keyword record is described in superclass: key = value

	// Sfsin tree record is described here
	static public class TreeRecord extends Record {
		public TreeRecord () {super ();}
		public TreeRecord (String line) throws Exception {super (line);}
		//public String getSeparator () {return ";";}	// to change default "\t" separator
		public int	id;
		public int	age;
		public double x;
		public double y;
		public double z;
		public double height;
		public double dbh;
	}



	// Official constructor
	// Format in Export mode needs a Stand in starter (then call save (fileName))
	// Format in Import mode needs fileName in starter (then call load (GModel))
	public SfsInventory (ExtensionStarter s) throws Exception {
		if (s.getStand () != null) {
			// Export mode
			createRecordSet ((SfsStand) s.getStand ());

		} else if (s.getString () != null) {
			// Import mode
			createRecordSet (s.getString ());

		} else {
			throw new Exception ("Unable to recognize mode Import/Export."
					+" stand (starter.getStand ())="+s.getStand ()
					+" fileName (starter.getString ())="+s.getString ());
		}

	}

	/**
	 * Extension dynamic compatibility mechanism.
	 * This matchwith method checks if the extension can deal (i.e. is compatible) with the referent.
	 */
	public boolean matchWith (Object referent) {
		try {
			if (!(referent instanceof GModel)) {return false;}
			GModel m = (GModel) referent;
			GStand s = ((Step) m.getScenario ().getRoot ()).getStand ();
			if (!(s instanceof SfsStand)) {return false;}

		} catch (Exception e) {
			Log.println (Log.ERROR, "SfsInventory.matchWith ()", "Error in matchWith () (returned false)", e);
			return false;
		}
		return true;
	}

	//
	// RecordSet -> File
	// is described in superclass (save (fileName)).
	//

	/**
	 * Phantom constructor.
	 * Only to ask for extension properties (authorName, version...).
	 */
	public SfsInventory () {}

	/**
	 * File -> RecordSet
	 * is delegated to superclass.
	 */
	//public SfsInventory (String fileName) throws Exception {super (fileName);}
	public SfsInventory (String fileName) throws Exception {createRecordSet (fileName);}	// for direct use for Import
	public void createRecordSet (String fileName) throws Exception {super.createRecordSet (fileName);}

	/**
	 * SfsStand -> RecordSet.
	 * Implementation here.
	 * To create a RecordSet for another model: implement an other construtor
	 * ex: public SfsInventory (MobyDickStand stand) throws Exception ...
	 */
	//public SfsInventory (SfsStand stand) throws Exception {
	public void createRecordSet (SfsStand stand) throws Exception {
		super.createRecordSet (stand);		// deals with RecordSet's source

		GTCStand s = (GTCStand) stand;		// Real type of Sfsin stands

		// 1. KeyRecords (none at the moment)


		// 2. TreeRecords
		add (new EmptyRecord ());
		add (new CommentRecord ("Tree records section"));
		add (new EmptyRecord ());
		for (Iterator i = s.getTrees ().iterator (); i.hasNext ();) {
			SfsTree t = (SfsTree) i.next ();

			TreeRecord r = new TreeRecord ();
			r.id = t.getId ();
			r.age = t.getAge ();
			r.x = t.getX ();
			r.y = t.getY ();
			r.z = t.getZ ();
			r.height = t.getHeight ();
			r.dbh = t.getDbh ();

			add (r);
		}
	}

	/**
	 * RecordSet -> SfsStand
	 * Implementation here.
	 * Was initialy described in SfsModel.loadInitStand ()
	 * To load a stand for another model, recognize real type of model :
	 * if (model instanceof SfsModel) -> this code
	 * if (model instanceof MobyDickModel) -> other code...
	 */
	public GStand load (GModel model) throws Exception {

		SfsSettings sfsSettings = (SfsSettings) model.getSettings ();


		// Initializations
		SfsStand initStand = new SfsStand ();
		initStand.setSourceName (source);		// generally fileName
		initStand.setDate (0);
		int maxId = 0;	//fc4.0

	System.out.println ("SfsInventory.load () : # of records : "+size ());
		for (Iterator i = this.iterator (); i.hasNext ();) {
			Record record = (Record) i.next ();

			if (record instanceof SfsInventory.TreeRecord) {
				SfsInventory.TreeRecord r = (SfsInventory.TreeRecord) record;	// cast to precise type
				if (r.id > maxId) {maxId = r.id;}

				SfsTree tree = new SfsTree (r.id, initStand, r.age, r.height, r.dbh,
						r.x, r.y, r.z, sfsSettings);

				// adds tree in stand
				initStand.addTree (tree);

			} else if (record instanceof SfsInventory.KeyRecord) {
				SfsInventory.KeyRecord r = (SfsInventory.KeyRecord) record;	// cast to precise type
				System.out.println (r);		// Automatic toString ()

			} else {
				throw new Exception ("Unrecognized record : "+record);	// automatic toString () (or null)
			}
		}

		// Init treeIdDispenser (to get new ids for regeneration)
		((SfsModel) model).getTreeIdDispenser ().setCurrentValue (maxId);

		// All trees added in stand : plot creation (not for all models)
		initStand.createPlot (model, sfsSettings.cellWidth);

		return initStand;
	}



	////////////////////////////////////////////////// Extension stuff
	/**
	 * From Extension interface.
	 */
	public String getName () {return Translator.swap ("SfsInventory");}

	/**
	 * From Extension interface.
	 */
	public String getVersion () {return VERSION;}
	public static final String VERSION = "1.0";

	/**
	 * From Extension interface.
	 */
	public String getAuthor () {return "F. de Coligny";}

	/**
	 * From Extension interface.
	 */
	public String getDescription () {return Translator.swap ("SfsInventory.description");}


	////////////////////////////////////////////////// IOFormat stuff
	public boolean isImport () {return true;}
	public boolean isExport () {return true;}





	// For test only
/*	public static void main (String [] args) {
		try {
			RecordSet records = new SfsInventory ("c:/fafa/java/capsis4/data/benoit/bc2001/fafa.inv");

			System.out.println ("# of records : "+records.size ());
			for (Iterator i = records.iterator (); i.hasNext ();) {
				Record r = (Record) i.next ();
				System.out.println (r);
			}

		} catch (Exception e) {
			System.out.println ("SfsInventory.main () - exception caught : "+e.toString ());
		}
	}
*/

}
