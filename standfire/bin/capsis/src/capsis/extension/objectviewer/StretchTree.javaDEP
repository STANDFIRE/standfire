/*
 * Capsis 4 - Computer-Aided Projections of Strategies in Silviculture
 *
 * Copyright (C) 2001-2003  Francois de Coligny
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package capsis.extension.objectviewer.sketch;

//import com.sun.j3d.utils.behaviors.mouse.*;
//import com.sun.j3d.utils.behaviors.vp.*;

import stretch.model.*;

import capsis.kernel.*;
import capsis.extension.*;
import capsis.util.*;
import capsis.util.methodprovider.*;
import capsis.gui.*;
import java.net.*;
import java.io.*;
import java.util.*;
import java.awt.*;
import java.awt.event.*;

import java.text.MessageFormat;
import java.util.ResourceBundle;

import javax.swing.Timer;
import javax.swing.*;
import javax.swing.text.*;
import javax.swing.event.*;

/**	A 3D single tree viewer for the Stretch module.
*	@author F. de Coligny - june 2008
*/
public class StretchTree extends ObjectViewer implements SelectionListener, Disposable {

	private SfsTree tree;
	protected SelectionSource source;


	static {
		Translator.addBundle("capsis.extension.objectviewer.StretchTree");
	}

	/**	Phantom constructor.
	*	Only to ask for extension properties (authorName, version...).
	*/
	public StretchTree () {}

	/**	Official constructor redefinition : chaining with superclass official constructor.
	*/
	public StretchTree (ExtensionStarter s) throws Exception {
		super (s);

		try {
			source = s.getSelectionSource ();
			source.addSelectionListener (this);
			
			extractTree (s.getCollection ());
			
			createUI ();
			reset ();
		} catch (Exception exc) {
			Log.println (Log.ERROR, "StretchTree.c ()", exc.toString (), exc);
			throw exc;	// fc - 4.11.2003 - object viewers may throw exception
		}

	}

	/**	Extension dynamic compatibility mechanism.
	*	This matchwith method checks if the extension can deal (i.e. is compatible) with the referent.
	*/
	public boolean matchWith (Object referent) {
		try {
			// fc - 6.2.2008 - referent is now always a Collection
			Collection c = (Collection) referent;
			if (c.isEmpty ()) {return false;}

			// fc - 22.9.2005
			// We need at least one SfsTree in the given collection
			for (Object o : c) {
				if (o instanceof SfsTree) {return true;}
			}
			
			return false;
		} catch (Exception e) {
			Log.println (Log.ERROR, "StretchTree.matchWith ()", "Error in matchWith () (returned false)", e);
			return false;
		}
	}

	/**	Extension interface.
	*/
	public String getName () {return Translator.swap ("StretchTree");}

	/**	Extension interface.
	*/
	public String getVersion () {return VERSION;}
	public static final String VERSION = "1.0";

	/**	Extension interface.
	*/
	public String getAuthor () {return "F. de Coligny";}

	/**	Extension interface.
	*/
	public String getDescription () {return Translator.swap ("StretchTree.description");}

	/**	Disposable
	*/
	public void dispose () {
System.out.println ("StretchTree.dispose ()...");
		try {
			source.removeSelectionListener (this);
		} catch (Exception e) {}	// does not matter very much
	}
	
	/**	SelectionListener
	*/
	public void sourceSelectionChanged (SelectionEvent e) {
		SelectionSource source = e.getSource ();
		Collection newSelection = source.getSelection ();
		boolean selectionActuallyChanged = e.hasSelectionActuallyChanged ();	// fc - 13.12.2007
System.out.println ("StretchTree, sourceSelectionChanged, selectionActuallyChanged="+selectionActuallyChanged);

		Collection listenerEffectiveSelection = extractTree (newSelection);
		
		// Tell the source what we've selected effectively - fc - 6.12.2007
		e.setListenerEffectiveSelection (listenerEffectiveSelection);
		
		reset ();
	}
	
	private Collection extractTree (Collection objects) {
		Collection trees = new ArrayList ();
		// We consider the first SfsTree in the given collection
		for (Object o : objects) {
			if (o instanceof SfsTree) {
				tree = (SfsTree) o;
				trees.add (tree);
				break;
			}
		}
		return trees;
	}
		
	private void reset () {
		removeAll ();
		//~ Color treeColor = Color.DARK_GRAY;
		//~ Color labelColor = Color.BLACK;
		//~ boolean showLabels = true;
		//~ JPanel part1 = new SideViewDrawer (trees, treeColor, labelColor, showLabels);
		//~ add (part1);
		
		revalidate ();
		repaint ();
	}
		

	/**	User interface definition.
	*/
	private void createUI () {
		// Layout parts
        setLayout (new GridLayout (1, 1));
		setPreferredSize (new Dimension (300, 400));
		// Now call reset
	}

}




